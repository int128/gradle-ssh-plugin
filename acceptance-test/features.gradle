apply plugin: 'ssh'

remotes {
    localhost {
        role 'testServers'
        host = 'localhost'
        user = System.properties['user.name']
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
    usingAgent {
        host = 'localhost'
        user = System.properties['user.name']
        agent = true
    }
    sudoWithPassword {
        host = 'localhost'
        user = "user${randomInt()}p"
        password = "pass${randomInt()}"
    }
    sudoNoPassword {
        host = 'localhost'
        user = "user${randomInt()}n"
        password = "pass${randomInt()}"
    }
    gw1 {
        host = 'localhost'
        user = System.properties['user.name']
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
    gw2 {
        host = 'localhost'
        user = System.properties['user.name']
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
        gateway = remotes.gw1
    }
    viaGateway {
        host = 'localhost'
        user = System.properties['user.name']
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
        gateway = remotes.gw2
    }
}


feature('executing a command') {
    task 'executeCommand'
    category 'test'
}

task executeCommand(type: SshTask) {
    doFirst {
        ext.x = randomInt()
        ext.y = randomInt()
    }
    session(remotes.localhost) {
        ext.a = execute "expr $x + $y"
    }
    doLast {
        assert a as int == (x + y)
    }
}


feature('filter hosts by role') {
    task 'executeCommandByRole'
    category 'test'
}

task executeCommandByRole(type: SshTask) {
    doFirst {
        ext.x = randomInt()
        ext.y = randomInt()
    }
    session(remotes.role('testServers')) {
        ext.a = execute "expr $x + $y"
    }
    doLast {
        assert a as int == (x + y)
    }
}


feature('authenticate with the ssh agent') {
    task 'authenticateWithSshAgent'
    category 'testWithAgent'
}

task authenticateWithSshAgent(type: SshTask) {
    doFirst {
        ext.x = randomInt()
        ext.y = randomInt()
    }
    session(remotes.usingAgent) {
        ext.a = execute "expr $x + $y"
    }
    doLast {
        assert a as int == (x + y)
    }
}


feature('connect via a gateway host') {
    task 'connectViaGateway'
    category 'testGateway'
}

task connectViaGateway(type: SshTask) {
    doFirst {
        // FIXME: this affects global settings
        ssh { knownHosts = allowAnyHosts }

        ext.x = randomInt()
        ext.y = randomInt()
    }
    session(remotes.viaGateway) {
        ext.a = execute "expr $x + $y"
    }
    doLast {
        assert a as int == (x + y)
    }
}


feature('executing commands sequentially') {
    task 'executeSequentially'
    category 'test'
}

task executeSequentially(type: SshTask) {
    finalizedBy 'cleanRemoteTemp'

    doFirst {
        ext.x = randomInt()
        ext.y = randomInt()
        ext.pathA = remoteTempPath('A')
        ext.pathB = remoteTempPath('B')
    }
    session(remotes.localhost) {
        execute "expr $x + $y > $pathA"
        execute "expr $x + `cat $pathA` > $pathB"
        ext.a = execute "cat $pathA"
        ext.b = execute "cat $pathB"
    }
    doLast {
        assert a as int == (x + y)
        assert b as int == (x + x + y)
    }
}


feature('each command should have independent environment') {
    task 'testEnvironmentOfCommand'
    category 'test'
}

task testEnvironmentOfCommand(type: SshTask) {
    session(remotes.localhost) {
        execute "export testdata=dummy"
        ext.a = execute 'echo "testdata is $testdata"'
    }
    doLast {
        assert a == 'testdata is '
    }
}


feature('executing a command with PTY allocation') {
    task 'executeCommandWithPty'
    category 'test'
}

task executeCommandWithPty(type: SshTask) {
    session(remotes.localhost) {
        executeBackground("env | grep -v SSH_TTY")
        executeBackground("env | grep SSH_TTY", pty: true)
    }
    session(remotes.localhost) {
        execute("env | grep -v SSH_TTY")
        execute("env | grep SSH_TTY", pty: true)
    }
}


feature('executing commands concurrently') {
    task 'executeConcurrently'
    category 'test'
}

task executeConcurrently(type: SshTask) {
    finalizedBy 'cleanRemoteTemp'

    doFirst {
        ext.tempPath = remoteTempPath(name)
    }
    // task should start sessions concurrently
    session(remotes.localhost) {
        executeBackground "sleep 2 && echo 2 >> $tempPath"
    }
    session(remotes.localhost) {
        executeBackground "sleep 3 && echo 3 >> $tempPath"
        executeBackground "sleep 1 && echo 1 >> $tempPath"
        executeBackground            "echo 0 >> $tempPath"
    }
    doLast {
        // all commands should be completed at this point
        sshexec {
            session(remotes.localhost) {
                ext.result = execute("cat $tempPath")
            }
        }
        assert result.readLines() == ['0', '1', '2', '3']
    }
}


feature('handling failure of the remote command') {
    task 'failureStatus'
    category 'test'
}

task failureStatus << {
    try {
        sshexec {
            session(remotes.localhost) {
                execute 'exit 1'
            }
        }
        assert false, 'an exception should be thrown'
    } catch(RuntimeException e) {
        assert e.localizedMessage.contains('status 1')
    }
}


feature('handling failure of the remote command in background') {
    task 'failureStatusInBackground'
    category 'test'
}

task failureStatusInBackground << {
    try {
        sshexec {
            session(remotes.localhost) {
                executeBackground 'exit 1'
            }
        }
        assert false, 'an exception should be thrown'
    } catch(RuntimeException e) {
        assert e.localizedMessage.contains('status 1')
    }
}


feature('executing a privileged command by sudo') {
    task 'executeSudoWithPassword'
    category 'aggressiveTest'
}

task executeSudoWithPassword(type: SshTask) {
    dependsOn   'createUserForSudoWithPassword'
    finalizedBy 'deleteUserForSudoWithPassword'

    session(remotes.sudoWithPassword) {
        ext.whoami = executeSudo('whoami', pty: true)
    }
    doLast {
        assert whoami == 'root'
    }
}

task createUserForSudoWithPassword(type: SshTask) {
    finalizedBy 'deleteUserForSudoWithPassword'

    session(remotes.localhost) {
        def username = remotes.sudoWithPassword.user
        def password = remotes.sudoWithPassword.password
        execute("sudo useradd -m $username")
        execute("sudo passwd $username") {
            interaction {
                when(partial: ~/.+[Pp]assword: */) {
                    standardInput << password << '\n'
                }
            }
        }
        execute("echo '$username ALL=(ALL) ALL' > /tmp/$username")
        execute("sudo chmod 440 /tmp/$username")
        execute("sudo chown 0.0 /tmp/$username")
        execute("sudo mv /tmp/$username /etc/sudoers.d")
    }
}

task deleteUserForSudoWithPassword(type: SshTask) {
    session(remotes.localhost) {
        def username = remotes.sudoWithPassword.user
        execute("sudo rm -v /etc/sudoers.d/$username")
        execute("sudo userdel -r $username")
    }
}


feature('executing a privileged command by sudo without password') {
    task 'executeSudoNoPassword'
    category 'aggressiveTest'
}

task executeSudoNoPassword(type: SshTask) {
    dependsOn 'createUserForSudoNoPassword'
    finalizedBy 'deleteUserForSudoNoPassword'

    session(remotes.localhost) {
        ext.whoami = executeSudo('whoami', pty: true)
    }
    doLast {
        assert whoami == 'root'
    }
}

task createUserForSudoNoPassword(type: SshTask) {
    finalizedBy 'deleteUserForSudoNoPassword'

    session(remotes.localhost) {
        def username = remotes.sudoNoPassword.user
        def password = remotes.sudoNoPassword.password
        execute("sudo useradd -m $username")
        execute("sudo passwd $username") {
            interaction {
                when(partial: ~/.+[Pp]assword: */) {
                    standardInput << password << '\n'
                }
            }
        }
        execute("echo '$username ALL=(ALL) NOPASSWD: ALL' > /tmp/$username")
        execute("sudo chmod 440 /tmp/$username")
        execute("sudo chown 0.0 /tmp/$username")
        execute("sudo mv /tmp/$username /etc/sudoers.d")
    }
}

task deleteUserForSudoNoPassword(type: SshTask) {
    session(remotes.localhost) {
        def username = remotes.sudoNoPassword.user
        execute("sudo rm -v /etc/sudoers.d/$username")
        execute("sudo userdel -r $username")
    }
}


feature('using remote specific identity') {
    task 'useRemoteSpecificIdentity'
    category 'aggressiveTest'
}

remotes {
    dedicatedIdentity {
        host = 'localhost'
        user = "user${randomInt()}n"
        identity = file("${System.properties['user.home']}/.ssh/id_rsa_pass")
        passphrase = 'pass_phrase'
    }
}

task useRemoteSpecificIdentity(type: SshTask) {
    dependsOn   'createUserWithAuthorizedKey'
    finalizedBy 'deleteUserWithAuthorizedKey'

    session(remotes.dedicatedIdentity) {
        ext.whoami = execute('whoami')
    }
    doLast {
        assert whoami == remotes.dedicatedIdentity.user
    }
}

task createUserWithAuthorizedKey(type: SshTask) {
    finalizedBy 'deleteUserWithAuthorizedKey'

    session(remotes.localhost) {
        def username = remotes.dedicatedIdentity.user
        execute("sudo useradd -m $username")
        execute("sudo -u $username mkdir ~$username/.ssh")
        execute("sudo -u $username tee ~$username/.ssh/authorized_keys < ~/.ssh/id_rsa_pass.pub")
    }
}

task deleteUserWithAuthorizedKey(type: SshTask) {
    session(remotes.localhost) {
        def username = remotes.dedicatedIdentity.user
        execute("sudo userdel -r $username")
    }
}


feature('executing a shell') {
    task 'executeShell'
    category 'test'
}

task executeShell(type: SshTask) {
    session(remotes.localhost) {
        shell {
            interaction {
                when(partial: ~/.*$/) {
                    standardInput << 'exit 0' << '\n'
                }
            }
        }
    }
}


feature('sending files to the remote host and acquiring result files') {
    task 'putAndGetFiles'
    category 'test'
}

task putAndGetFiles(type: SshTask, dependsOn: 'setupBuildDir') {
    finalizedBy 'cleanRemoteTemp'

    doFirst {
        ext.x = randomInt()
        ext.y = randomInt()

        ext.localX = file("$buildDir/local-${randomInt()}") << x
        ext.localY = file("$buildDir/local-${randomInt()}") << y
        ext.localA = file("$buildDir/local-${randomInt()}")
        ext.localB = file("$buildDir/local-${randomInt()}")

        ext.pathX = remoteTempPath('X')
        ext.pathY = remoteTempPath('Y')
        ext.pathA = remoteTempPath('A')
        ext.pathB = remoteTempPath('B')
    }
    session(remotes.localhost) {
        put(localX.path, pathX)
        put(localY.path, pathY)
        execute("expr `cat $pathX` + `cat $pathY` > $pathA")
        execute("expr `cat $pathX` - `cat $pathY` > $pathB")
        get(pathA, localA.path)
        get(pathB, localB.path)
    }
    doLast {
        assert localA.text as int == (x + y)
        assert localB.text as int == (x - y)
    }
}


feature('sending files to the remote host and acquiring result files') {
    task 'getLargeFile'
    category 'aggressiveTest'
}

task getLargeFile(type: SshTask, dependsOn: 'setupBuildDir') {
    finalizedBy 'cleanRemoteTemp'

    doFirst {
        ext.sizeX = 1024 * 256
        ext.localX = file("$buildDir/local-${randomInt()}")
        ext.pathX = remoteTempPath('X')
    }
    session(remotes.localhost) {
        execute("dd if=/dev/zero of=$pathX bs=1024 count=$sizeX")
        get(pathX, localX.path)
    }
    doLast {
        assert localX.size() == 1024 * sizeX
    }
}


task setupBuildDir(type: Delete) {
    delete buildDir
    doLast {
        buildDir.mkdir()
    }
}

task cleanRemoteTemp(type: SshTask) {
    session(remotes.localhost) {
        assert remoteTempPrefix
        execute("rm -v ${remoteTempPrefix}*")
    }
}

ext.remoteTempPrefix = "/tmp/fixture-${randomInt()}"

def remoteTempPath(String name = '') {
    "$remoteTempPrefix-$name"
}

static randomInt(int max = 10000) {
    (Math.random() * max) as int
}
