
feature('sending files to the remote host and acquiring result files') {
    task 'putAndGetFiles'
    category 'test'
}

task putAndGetFiles(type: SshTask, dependsOn: 'setupBuildDir') {
    finalizedBy 'cleanRemoteTemp'

    doFirst {
        ext.x = randomInt()
        ext.y = randomInt()

        ext.localX = file("$buildDir/local-${randomInt()}") << x
        ext.localY = file("$buildDir/local-${randomInt()}") << y
        ext.localA = file("$buildDir/local-${randomInt()}")
        ext.localB = file("$buildDir/local-${randomInt()}")

        ext.pathX = remoteTempPath('X')
        ext.pathY = remoteTempPath('Y')
        ext.pathA = remoteTempPath('A')
        ext.pathB = remoteTempPath('B')
    }
    session(remotes.localhost) {
        put localX, pathX
        put localY, pathY
        execute("expr `cat $pathX` + `cat $pathY` > $pathA")
        execute("expr `cat $pathX` - `cat $pathY` > $pathB")
        get pathA, localA
        get pathB, localB
    }
    doLast {
        assert localA.text as int == (x + y)
        assert localB.text as int == (x - y)
    }
}


feature('sending a whole directory') {
    task 'putDirectory'
    category 'test'
}

task putDirectory(type: SshTask, dependsOn: 'setupBuildDir') {
    finalizedBy 'cleanRemoteTemp'

    doFirst {
        ext.x1 = randomInt()
        ext.y1 = randomInt()
        ext.z1 = randomInt()

        ext.localX = file("$buildDir/X-${randomInt()}")
        localX.mkdir()
        ext.localY = file("$localX/Y-${randomInt()}")
        localY.mkdir()
        ext.localZ = file("$localY/Z-${randomInt()}")
        localZ.mkdir()

        ext.localX1 = file("$localX/X1-${randomInt()}") << x1
        ext.localY1 = file("$localY/Y1-${randomInt()}") << y1
        ext.localZ1 = file("$localZ/Z1-${randomInt()}") << z1

        ext.remoteBase = remoteTempPath()
    }
    session(remotes.localhost) {
        execute "mkdir -vp $remoteBase"
        put localX, remoteBase
    }
    doLast {
        sshexec {
            session(remotes.localhost) {
                assert execute("cat $remoteBase/${localX.name}/${localX1.name}") as int == x1
                assert execute("cat $remoteBase/${localX.name}/${localY.name}/${localY1.name}") as int == y1
                assert execute("cat $remoteBase/${localX.name}/${localY.name}/${localZ.name}/${localZ1.name}") as int == z1
            }
        }
    }
}


feature('acquiring a whole directory') {
    task 'getDirectory'
    category 'test'
}

task getDirectory(type: SshTask, dependsOn: 'setupBuildDir') {
    finalizedBy 'cleanRemoteTemp'

    doFirst {
        ext.x = randomInt()
        ext.y = randomInt()
        ext.z = randomInt()
        ext.x1 = randomInt()
        ext.y1 = randomInt()
        ext.z1 = randomInt()
        ext.remoteBase = remoteTempPath()
    }
    session(remotes.localhost) {
        ext.remoteBaseName = execute "basename $remoteBase"
        execute "mkdir -vp $remoteBase/$x/$y/$z"
        execute "echo $x1 > $remoteBase/$x/$x1"
        execute "echo $y1 > $remoteBase/$x/$y/$y1"
        execute "echo $z1 > $remoteBase/$x/$y/$z/$z1"
        get remoteBase, buildDir
    }
    doLast {
        assert file("$buildDir/$remoteBaseName/$x/$x1").text as int == x1
        assert file("$buildDir/$remoteBaseName/$x/$y/$y1").text as int == y1
        assert file("$buildDir/$remoteBaseName/$x/$y/$z/$z1").text as int == z1
    }
}


feature('retrieve a large file from the remote host and send it again') {
    task 'getAndPutLargeFile'
    category 'aggressiveTest'
}

task getAndPutLargeFile(type: SshTask, dependsOn: 'setupBuildDir') {
    finalizedBy 'cleanRemoteTemp'
    finalizedBy 'cleanBuildDir'

    doFirst {
        ext.sizeX = 1024 * 256
        ext.localX = file("$buildDir/local-${randomInt()}")
        ext.pathX = remoteTempPath('X')
        ext.pathY = remoteTempPath('Y')
    }
    session(remotes.localhost) {
        execute("dd if=/dev/zero of=$pathX bs=1024 count=$sizeX")
        get pathX, localX

        put localX, pathY
        ext.sizeY = execute("wc -c < $pathY") as int
    }
    doLast {
        assert localX.size() == 1024 * sizeX
        assert sizeY == 1024 * sizeX
    }
}
