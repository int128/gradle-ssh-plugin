/**
 * Examples.
 *
 * To execute these, prepare your localhost.
 * - start sshd
 * - generate key pair (ssh-keygen -t rsa)
 * - add your pubic key to authorized_keys
 * - make sure that you can log in without password
 *
 * If gradle is invoked with <code>-DuseRelease</code>,
 * released JAR in the Maven central repository will be used.
 *
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        if (System.properties.useRelease) {
            classpath 'org.hidetake:gradle-ssh-plugin:0.1.7'
        } else {
            classpath files('../build/libs/gradle-ssh-plugin-0.1.7.jar')
            classpath 'com.jcraft:jsch:0.1.48'
        }
    }
}

apply plugin: 'ssh'
apply plugin: 'project-report'

ssh {
    config(StrictHostKeyChecking: 'no')
}

remotes {
    localhost {
        role 'webServers'
        host = 'localhost'
        user = System.properties['user.name']
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
    myhost {
        role 'webServers'
        host = '127.0.0.1'
        user = System.properties['user.name']
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
}

task showEnvironmentSingle(type: SshTask) {
    description 'execute command on a remote'
    session(remotes.localhost) {
        execute "echo ${remote.user}@${remote.host}:${remote.port}"
        execute 'env'
    }
}

task showEnvironmentAll(type: SshTask) {
    description 'execute command on remotes'
    session(remotes.role('webServers')) {
        execute 'env'
    }
}

task obtainValue(type: SshTask) {
    description 'obtaining value from remote command (silent)'
    outputLogLevel = LogLevel.DEBUG
    session(remotes.localhost) {
        def targetArchitecture = execute('uname -sm').trim()
        println "target architecture is ${targetArchitecture}."
    }
}

task concurrentExecution(type: SshTask) {
    description 'describes how to execute SSH concurrently'
    session(remotes.localhost) {
        (1..5).each { i ->
            executeBackground "sleep ${i} && echo -n ${i}- && date"
        }
    }
    session(remotes.myhost) {
        executeBackground 'sar 1 5'
    }
}

task executeSudoNoPwd(type: SshTask) {
    description 'execute command on a remote'
    session(remotes.localhost) {
        execute('sudo env', pty: true)
    }
}

task executeSudoWithPwd(type: SshTask) {
    description 'execute command as sudo on a remote supporting the provision of a password for the sudo command'
    doFirst {
        assert project.hasProperty('sudoPwd'), "You must provide password for sudo command: -PsudoPwd=..."
        // of course you could just set the password in the remotes configuration, probably reading the password as a property from ~/.gradle/gradle.properties
        remotes.myhost.password = project.sudoPwd
    }

    session(remotes.myhost) {
        executeSudo('env', pty: true)
    }
}


task executionFailed(type: SshTask) {
    description 'describes error handling'
    session(remotes.localhost) {
        // may be failed
        execute 'touch /root/test'
    }
}

task sshInTask << {
    description 'describes how to execute SSH in the task'
    def command = "env"
    println command
    sshexec {
        session(remotes.localhost) {
            execute command
        }
    }
}

void showRemotes(Project baseProject) {
    logger.info('({}) rootProject.remotes = {}', baseProject, baseProject.parent.remotes)
    logger.info('({}) project.remotes = {}', baseProject, baseProject.remotes)
}
